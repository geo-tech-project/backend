
/**
 * R package to execute R Files, commands and methods
 */
 const R = require('r-integration');

 /**
  * Path to the R File where the functions are stored
  */
 const rFilePath = './R/ML_AOA.R';

/**
 * The function calls the classifyAndAOA function of the ML_AOA-R-script. It passes the path of the model
 * to be used for the calculations and the desired bands which the AOI-stack bands should be named like.
 * The function returns the output variable in which the reponse of the asyncronous call is stored.
 * The response is either a String which confirms the successfull calculations or an error.
 * 
 * @param {String} modelPath The relative path to the location of the model to be used.
 * @param {String[]} desiredBands Telling the R-Skript how to name the bands of the used aoi.tif. Each Band must be a standalone String in
 * the Array. Required is the 'SCL' which was used for filtering the clouds before.
 * @returns the result of the R-Skript. Either error object or String that confirms the successfull calculations.
 */
function calculateAOAwithGivenModel(modelPath, desiredBands) {
    
    let output;
    
    try{
        output = R.callMethodAsync(rFilePath, "classifyAndAOA", {modelPath: modelPath, desiredBands: desiredBands})    
    } catch (error) {
        output = {
            message: "An Error in the R-Script occured", 
            error: error
        }        
    }
    return output;
 }

/**
 * The function calls the training function of the ML_AOA-R-script. It passes the algorithm (desired by the user), 
 * the trainingdataPath (relative filepath where the uploaded training data can be found), the hyperparameter (defined by the user)
 * and the desiredBands (to name the aoi.tif bands).
 * 
 * @param {String} algorithm 
 * @param {String} trainingDataPath 
 * @param {String} hyperparameter 
 * @param {Array} desiredBands 
 * @returns 
 */
async function calculateNewModelAndAOA(algorithm, trainingDataPath, hyperparameter, desiredBands) {

    let output = {}

    try {
        output.model = await R.callMethodAsync(rFilePath, "training", {algorithm: algorithm, trainingDataPath: trainingDataPath, hyperparameter: hyperparameter, desiredBands})
    } catch (error) {
        console.log(error)
        output.error = "An Error in the R-Script occured"
    }

    try {
        output.classifyAndAOA = await R.callMethodAsync(rFilePath, "classifyAndAOA", {modelPath: "R/model/model.RDS", desiredBands: desiredBands})
    } catch (error) {
        console.log(error)
        output.error = "An Error in the R-Script occured"
    }    
    
    return output;
 }


 /**
 * This function will process the incoming data in the format which is needed by the R function. For example putting startDate and EndDate in
 * a single datetime. In the moment some data which can not be specified in the Front End, are hardcoded here.  
 * @param {{
  *          option: String,
  *          algorithm: String
  *          trainingDataPath: String,
  * }} data The data which must be provided by the POST request, to start the R function. 
  * @returns The processed data as an object.
  */
function processInputData(data) {
    console.log(data)
    var out = {
        option: data.option,
        filePath: './public/uploads/' + data.filename, 
        desiredBands: data.channels
    }
    if(data.option == 'data') {
        if(data.algorithm == "rf") {
            out.algorithm = "rf";
            out.hyperparameter = [data.mtry]
        } else if (data.algorithm == "svmRadial") {
            out.algorithm ="svmRadial"
            out.hyperparameter = [data.sigma, data.cost]
        }
    }
    console.log(out)
    return out;
}



 /**
 * The functions processInoutData and getTraingDataTif where combinded here to a single function, which can be called from app.js if its
 * get data for starting a calculation.  
 * @param {{
  *          bottomLeftlng: Number,
  *          bottomLeftlat: Number,
  *          toprightlng: Number,
  *          toprightlat: Number,
  *          trainingDataPath: String,
  *          option: String,
  *          startDate: Date,
  *          endDate: Date
  * }} request All the data which will be provided from the front end. 
  * @returns The output which is generated by getTraingDataTif
  */
 async function calculateAOA(request) {

    let processedData = processInputData(request);
    let output = {}
    if (processedData.option == 'data') {
        output.message = await calculateNewModelAndAOA(processedData.algorithm, processedData.filePath, processedData.hyperparameter, processedData.desiredBands)
        console.log("Model, prediction and AOA created successfully")
    } else if (processedData.option == 'model') {
        output.message = await calculateAOAwithGivenModel(processedData.filePath, processedData.desiredBands)
        console.log("Prediction and AOA created successfully")
    }
    return output;
}


 module.exports = {
    calculateAOA
};