trainData <- readRDS("~/WWU/7. Semester/Fernerkundung VL + Ü/Daten für R/Sentinel-2-Daten/Köln/trainData.RDS")
trainData
view(trainData)
View(trainData)
trainData <- readRDS("~/WWU/7. Semester/Fernerkundung VL + Ü/Daten für R/Sentinel-2-Daten/Köln/trainData.RDS")
trainData <- readRDS("~/WWU/7. Semester/Fernerkundung VL + Ü/Daten für R/Sentinel-2-Daten/Köln/trainData.RDS")
trainData
View(trainData)
boxplot(trainData$NDVI~trainData$Label, las=2)
boxplot(trainData$B04~trainData$Label, las=2)
boxplot(trainData$NDVI~trainData$Label, las=2)
boxplot(trainData$NIR~trainData$Label, las=2)
boxplot(trainData$B08~trainData$Label, las=2)
boxplot(trainData$NDVI_3x3_sd~trainData$Label, las=2)
boxplot(trainData$B08~trainData$Label, las=2)
boxplot(trainData$B04~trainData$Label, las=2)
boxplot(trainData$B03~trainData$Label, las=2)
boxplot(trainData$B02~trainData$Label, las=2)
boxplot(trainData$NDVI_3x3_sd~trainData$Label, las=2)
library(caret)
trainData_subset <-extr[createDataPartition((trainData$Label, p=0.1)$Resample1)]
trainData_subset <-extr[createDataPartition((trainData$Label, p=0.1)$Resample1)]
trainData_subset <-extr[createDataPartition((trainData$Label,p=0.1)$Resample1)]
trainData_subset <- extr[createDataPartition(trainData$Label,p=0.1)$Resample1,]
trainData_subset <- trainData[createDataPartition(trainData$Label,p=0.1)$Resample1,]
featurePlot(trainData_subset[,c("B02","B03","B04","NDVI_3x3_sd")])
featurePlot(trainData_subset[,c("B02","B03","B08","NDVI_3x3_sd")],
factor(trainData$Label),plot="pairs",
auto.key = list(columns = 2))
featurePlot(trainData_subset[,c("B02","B03","B08","NDVI_3x3_sd")],
factor(trainData_subset$Label),plot="pairs",
auto.key = list(columns = 2))
featurePlot(trainData_subset[,c("B04","B03","B08","NDVI_3x3_sd")],
factor(trainData_subset$Label),plot="pairs",
auto.key = list(columns = 2))
### die folgenden Zeilen nur um die Visualisierung zu optimieren!
myColors<- c("#000000", "#7fff00", "#8b0000", "#9932cc", "#ff7f00",
"#458b00", "#008b8b", "#0000ff", "#ffff00","darkred","darkblue")
my_settings <- list(superpose.symbol=list(col=myColors,
fill= myColors))
### jetzt der eigentliche Feature Plot:
featurePlot(trainData_subset[,c("B02","B03","B08","NDVI_3x3_sd")],
factor(trainData_subset$Label),plot="pairs",
auto.key = list(columns = 2),
par.settings=my_settings)
trainData_subset <- trainData[createDataPartition(trainData$Label,p=0.2)$Resample1,]
### jetzt der eigentliche Feature Plot:
featurePlot(trainData_subset[,c("B02","B03","B08","NDVI_3x3_sd")],
factor(trainData_subset$Label),plot="pairs",
auto.key = list(columns = 2),
par.settings=my_settings)
### die folgenden Zeilen nur um die Visualisierung zu optimieren!
myColors<- c("#000000", "#7fff00", "#8b0000", "#9932cc", "#ff7f00",
"#458b00", "#008b8b", "#0000ff", "#ffff00","darkred","darkblue","pink", "apple_green")
### jetzt der eigentliche Feature Plot:
featurePlot(trainData_subset[,c("B02","B03","B08","NDVI_3x3_sd")],
factor(trainData_subset$Label),plot="pairs",
auto.key = list(columns = 2),
par.settings=my_settings)
trainData_subset <- trainData[createDataPartition(trainData$Label,p=0.1)$Resample1,]
### jetzt der eigentliche Feature Plot:
featurePlot(trainData_subset[,c("B02","B03","B08","NDVI_3x3_sd")],
factor(trainData_subset$Label),plot="pairs",
auto.key = list(columns = 2),
par.settings=my_settings)
getwd()
getwd()
getwd()
setwd("C:/Users/thali/OneDrive/Dokumente/WWU")
getwd()
library(sf)
getwd()
setwd("~/WWU/6. Semester/Geosoftware 1/GitHub/backend/R")
getwd()
#Set working directory to source file location
getwd()
library(tmap)
tmap_mode("view")
koeln_shape = read_sf("trainingsdaten_koeln_25832.gpkg")
#tmap_options(check.and.fix = TRUE)
tm_shape(st_geometry(koeln_shape)) +  tm_polygons()
#tmap_options(check.and.fix = TRUE)
tm_shape(st_geometry(koeln_shape)) +  tm_polygons()
tmap_options(check.and.fix = TRUE)
tm_shape(st_geometry(koeln_shape)) +  tm_polygons()
st_crs(koeln_shape)
nl_shape = read_sf("NL.gpkg")
nl_shape$geom
koeln_shape$geom
library(mapview)
# BBOX from shape
bbox = st_bbox(koeln_shape)
bbox
# Transform BBOX TO WGS84
st_as_sfc(bbox) |>
st_transform("EPSG:4326") |>
st_bbox() -> bbox_wgs84
bbox_wgs84
# Querying images with rstac
library(rstac)
s = stac("https://earth-search.aws.element84.com/v0")
items = s |>
stac_search(collections = "sentinel-s2-l2a-cogs",
bbox = c(bbox_wgs84["xmin"],bbox_wgs84["ymin"],
bbox_wgs84["xmax"],bbox_wgs84["ymax"]),
datetime = "2021-06-01/2021-06-30",
limit = 500) |>
post_request()
items
# Creating an image collection
library(gdalcubes)
assets = c("B01","B02","B03","B04","B05","B06", "B07","B08","B8A","B09","B11","SCL")
s2_collection = stac_image_collection(items$features, asset_names = assets, property_filter = function(x) {x[["eo:cloud_cover"]] < 10})
s2_collection
# Defining the data cube geometry
v.bbox.overview = cube_view(srs="EPSG:25832",  dx=400, dy=400, dt="P30D",
aggregation="median", resampling = "average",
extent=list(t0 = "2021-06-01", t1 = "2021-06-30",
left=bbox["xmin"] - 100, right=bbox["xmax"] + 100,
top=bbox["ymax"] + 100, bottom=bbox["ymin"] - 100))
v.bbox.overview
gdalcubes_options(threads = 16)
S2.mask = image_mask("SCL", values = c(3,8,9))
sentinel <- raster_cube(s2_collection, v.bbox.overview, S2.mask)
sentinel |>
select_bands(c("B03", "B04", "B08")) |>
#filter_geom(koeln_shape_simple$geom) |>
plot(rgb = 3:1, zlim=c(0,1500))
write_tif(
sentinel,
dir = "~/GitHub/backend/R",
prefix = basename("satellite_image_for_training"),
overviews = FALSE,
COG = TRUE,
rsmpl_overview = "nearest")
write_tif(
sentinel,
dir = "",
prefix = basename("satellite_image_for_training"),
overviews = FALSE,
COG = TRUE,
rsmpl_overview = "nearest")
write_tif(
sentinel,
dir = "/tif",
prefix = basename("satellite_image_for_training"),
overviews = FALSE,
COG = TRUE,
rsmpl_overview = "nearest")
write_tif(
sentinel,
dir = "/tif",
prefix = basename("satellite_image_for_training.tif"),
overviews = FALSE,
COG = TRUE,
rsmpl_overview = "nearest")
write_tif(
sentinel,
dir = "~/GitHub/backend/R",
prefix = basename("satellite_image_for_training.tif"),
overviews = FALSE,
COG = TRUE,
rsmpl_overview = "nearest")
?write_tif
write_tif(
sentinel,
dir = "~/GitHub/backend/R",
prefix = basename(satellite_image_for_training),
overviews = FALSE,
COG = TRUE,
rsmpl_overview = "nearest")
write_tif(
sentinel,
dir = "~/GitHub/backend/R",
prefix = "test.tif",
overviews = FALSE,
COG = TRUE,
rsmpl_overview = "nearest")
write_tif(
sentinel,
dir = tempfile(pattern = ""),
prefix = basename(tempfile(pattern = "cube_")),
overviews = FALSE,
COG = TRUE,
rsmpl_overview = "nearest",
creation_options = NULL,
write_json_descr = FALSE,
pack = NULL
)
write_tif(
sentinel,
dir = "C:/Users/thali/OneDrive/Dokumente/WWU/6. Semester/Geosoftware 1/GitHub/backend/R"
prefix = "test.tif",
overviews = FALSE,
COG = TRUE,
rsmpl_overview = "nearest",
creation_options = NULL,
write_json_descr = FALSE,
pack = NULL
)
write_tif(
sentinel,
dir = "C:/Users/thali/OneDrive/Dokumente/WWU/6. Semester/Geosoftware 1/GitHub/backend/R"
prefix = "test"
overviews = FALSE,
COG = TRUE,
rsmpl_overview = "nearest",
creation_options = NULL,
write_json_descr = FALSE,
pack = NULL
)
write_tif(
sentinel,
dir = "C:/Users/thali/OneDrive/Dokumente/WWU/6. Semester/Geosoftware 1/GitHub/backend/R",
prefix = "test.tif",
overviews = FALSE,
COG = TRUE,
rsmpl_overview = "nearest",
creation_options = NULL,
write_json_descr = FALSE,
pack = NULL
)
sentinel <- raster_cube(s2_collection, v.bbox.overview, S2.mask)
write_tif(
sentinel,
dir = "C:/Users/thali/OneDrive/Dokumente/WWU/6. Semester/Geosoftware 1/GitHub/backend/R",
prefix = "test.tif",
overviews = FALSE,
COG = TRUE,
rsmpl_overview = "nearest",
creation_options = NULL,
write_json_descr = FALSE,
pack = NULL
)
# Defining the data cube geometry
v.bbox.overview = cube_view(srs="EPSG:25832",  dx=10, dy=10, dt="P30D",
aggregation="median", resampling = "average",
extent=list(t0 = "2021-06-01", t1 = "2021-06-30",
left=bbox["xmin"] - 100, right=bbox["xmax"] + 100,
top=bbox["ymax"] + 100, bottom=bbox["ymin"] - 100))
v.bbox.overview
gdalcubes_options(threads = 16)
S2.mask = image_mask("SCL", values = c(3,8,9))
sentinel <- raster_cube(s2_collection, v.bbox.overview, S2.mask)
write_tif(
sentinel,
dir = "C:/Users/thali/OneDrive/Dokumente/WWU/6. Semester/Geosoftware 1/GitHub/backend/R",
prefix = "test.tif",
overviews = FALSE,
COG = TRUE,
rsmpl_overview = "nearest",
creation_options = NULL,
write_json_descr = FALSE,
pack = NULL
)
# Defining the data cube geometry
v.bbox.overview = cube_view(srs="EPSG:25832",  dx=20, dy=20, dt="P30D",
aggregation="median", resampling = "average",
extent=list(t0 = "2021-06-01", t1 = "2021-06-30",
left=bbox["xmin"] - 100, right=bbox["xmax"] + 100,
top=bbox["ymax"] + 100, bottom=bbox["ymin"] - 100))
v.bbox.overview
gdalcubes_options(threads = 16)
S2.mask = image_mask("SCL", values = c(3,8,9))
sentinel <- raster_cube(s2_collection, v.bbox.overview, S2.mask)
write_tif(
sentinel,
dir = "C:/Users/thali/OneDrive/Dokumente/WWU/6. Semester/Geosoftware 1/GitHub/backend/R",
prefix = "test.tif",
overviews = FALSE,
COG = TRUE,
rsmpl_overview = "nearest",
creation_options = NULL,
write_json_descr = FALSE,
pack = NULL
)
sentinel_stack <- stack("test.tif2021-06-01.tif")
sentinel_stack <- stack("test.tif")
library(raster)
sentinel_stack <- stack("test.tif")
sentinel_stack
s2_collection
names(sentinel_stack) <- c("B01", "B02", "B03", "B04",
"B05", "B06", "B07", "B08",
"B09", "B11", "B8A", "SCL")
plot(sentinel_stack)
writeRaster(sentinel_stack,"predictors_koeln.grd")
?reproj()
crs(sentinel_stack)
sentinel_stack_WGS84 <- st_transform(sentinel_stack,crs= "+proj=utm +zone=32 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
sentinel_stack_WGS84 <- st_transform(sentinel_stack,crs= "+init=epsg:4236")
sentinel_B01 <- sentinel_stack$B01
crs(sentinel_B01)
sentinel_B01_WGS84 <- st_transform(sentinel_stack,crs= "+init=epsg:4236")
?st_transform
?st_transform
library(st)
library(star)
library(stars)
sentinel_B01_WGS84 <- st_transform(sentinel_stack,crs= "+init=epsg:4236")
sentinel_stack <- st_read("test.tif")
sentinel_stack <- ("test.tif")
sentinel_stack <- stack("test.tif")
stack
sentinel_stack_grd <- st_read("test.tif")
sentinel_stack_grd <- st_read("predictors_koeln.grd")
?stread()
?st_read()
sentinel_stack_grd <- st_read("test.grd")
sentinel_stack_grd <- st_read("test.tif")
test <- raster("test.tif")
crs(test)
plot(test)
test <- raster("test.tif")
crs(test)
plot(test)
test_WGS84 <- st_transform(test,crs= "+init=epsg:4236")
?projectStack
?projectRaster
test_WGS84 <- projectRaster(test,crs= crs(bbox_wgs84))
#sentinel |>
#select_bands(c("B03", "B04", "B08")) |>
#filter_geom(koeln_shape_simple$geom) |>
#plot(rgb = 3:1, zlim=c(0,1500))
sentinel_stack <- stack(sentinel)
#sentinel |>
#select_bands(c("B03", "B04", "B08")) |>
#filter_geom(koeln_shape_simple$geom) |>
#plot(rgb = 3:1, zlim=c(0,1500))
sentinel_stack <- stack(sentinel)
plot(sentinel)
